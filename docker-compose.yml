services:
  backend:
    image: ghcr.io/ruslan-skv/backend:latest
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network  
    environment:
      - POSTGRES_HOST=db
    env_file:
      - backend/.env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/afisha/films"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: ghcr.io/ruslan-skv/frontend:latest 
    container_name: frontend
    networks:
      - app_network
    volumes:
      - frontend_dist:/app/dist
    env_file:
      - frontend/.env
    
  db:
    image: postgres:15
    container_name: postgres
    networks:
      - app_network
    environment:
      POSTGRES_USER: student
      POSTGRES_PASSWORD: student
      POSTGRES_DB: afisha
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init-db:/docker-entrypoint-initdb.d
    restart: unless-stopped
    ports:
      - "5432:5432" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U student -d afisha"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:  
    image: dpage/pgadmin4
    container_name: pgadmin
    networks:
      - app_network
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin/data
    ports:
      - 8080:80
    depends_on:
      - db
    restart: unless-stopped

  nginx:
    image: ghcr.io/ruslan-skv/nginx:latest
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
    volumes:
      - frontend_dist:/usr/share/nginx/html:ro  
    networks:
      - app_network
    
volumes:
  postgres_data:
  frontend_dist:
  pgadmin-data:

networks:
  app_network:
    driver: bridge
