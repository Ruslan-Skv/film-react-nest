services:
  frontend:
    build: ./frontend
    environment:
      - VITE_API_URL=/api/afisha
      - VITE_CDN_URL=/content/afisha
    networks:
      - frontend_network

  backend:
    build: ./backend
    environment:
      - NODE_ENV=development
      - DATABASE_DRIVER=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=student
      - POSTGRES_PASSWORD=student
      - POSTGRES_DB=afisha
      - LOGGER_TYPE=${LOGGER_TYPE:-dev}
    env_file:
      - ./backend/.env
    depends_on:
      - db
    ports:
      - "3000:3000"  # Для отладки
    networks:
      - backend_network  
      - frontend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  nginx:
    build:
        context: ./nginx
        dockerfile: Dockerfile
    ports:
      - "80:80"  # Основной порт
      - "8080:80"  # Альтернативный (если 80 занят)
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
    networks:
      - frontend_network
      - backend_network

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: student
      POSTGRES_PASSWORD: student
      POSTGRES_DB: afisha
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Если нужен доступ с хоста
    networks:
      - backend_network

  pgadmin:  
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - backend_network

volumes:
  postgres_data:

networks: 
  backend_network:  # Сеть для бэкенда, БД и pgAdmin
    driver: bridge
  frontend_network:  # Сеть для фронтенда и nginx
    driver: bridge